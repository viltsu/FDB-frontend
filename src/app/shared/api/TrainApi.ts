/**
 * FDB-backend
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class TrainApi {
    protected basePath = 'http://localhost:3000/api';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Return current trains arriving to the stop
     *
     * @param station
     * @param limit
     */
    public trainFindCurrent (station: string, limit?: string, extraHttpRequestParams?: any ) : Observable<Array<models.Train>> {
        const path = this.basePath + '/trains';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'station' is not null or undefined
        if (station === null || station === undefined) {
            throw new Error('Required parameter station was null or undefined when calling trainFindCurrent.');
        }
        if (station !== undefined) {
            queryParameters.set('station', String(station));
        }

        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Return list of stations
     *
     * @param search
     */
    public trainFindStation (search?: string, extraHttpRequestParams?: any ) : Observable<Array<models.TrainStation>> {
        const path = this.basePath + '/trains/station';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
