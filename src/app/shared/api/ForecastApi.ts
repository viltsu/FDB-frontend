/**
 * FDB-backend
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class ForecastApi {
    protected basePath = 'https://localhost/api';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * fetch forecast
     *
     * @param lat
     * @param lon
     */
    public forecastFindGetForecasts (lat: number, lon: number, extraHttpRequestParams?: any ) : Observable<Array<models.Forecast>> {
        const path = this.basePath + '/Forecasts';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'lat' is not null or undefined
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling forecastFindGetForecasts.');
        }
        // verify required parameter 'lon' is not null or undefined
        if (lon === null || lon === undefined) {
            throw new Error('Required parameter lon was null or undefined when calling forecastFindGetForecasts.');
        }
        if (lat !== undefined) {
            queryParameters.set('lat', String(lat));
        }

        if (lon !== undefined) {
            queryParameters.set('lon', String(lon));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param lat
     * @param lon
     */
    public forecastFindGetForecastsFind (lat?: string, lon?: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/Forecasts/find';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (lat !== undefined) {
            queryParameters.set('lat', String(lat));
        }

        if (lon !== undefined) {
            queryParameters.set('lon', String(lon));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param request
     */
    public forecastInvoke (request?: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/Forecasts/invoke';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let formParams = new URLSearchParams();

        headerParams.set('Content-Type', 'application/x-www-form-urlencoded');

        formParams['request'] = request;

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = formParams.toString();

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
